#!/usr/bin/env bash
set -eo pipefail

# https://docs.github.com/en/rest/overview/api-versions
GH_REST_API_VERSION="X-GitHub-Api-Version:2022-11-28"
# The minimum fzf version that the user needs to run all interactive commands.
MIN_FZF_VERSION="0.29.0"

# Enable terminal-style output even when the output is redirected.
export GH_FORCE_TTY=100%
# Disable the gh pager
export GH_PAGER="cat"

# NotificationReason:
# assign, author, comment, invitation, manual, mention, review_requested, security_alert, state_change, subscribed, team_mention, ci_activity
# NotificationSubjectTypes:
# CheckSuite, Commit, Discussion, Issue, PullRequest, Release, RepositoryVulnerabilityAlert, ...

GREEN='\033[0;32m'
NC='\033[0m'
WHITE_BOLD='\033[1m'

# Create help message with colored text
# IMPORTANT: Keep it synchronized with the README, but without the Examples.
# IMPORTANT: Use an unquoted delimiter (EOF) to have the variables expanded.
HELP_TEXT=$(
    cat <<EOF
${WHITE_BOLD}Usage${NC}
  gh notify [Flags]

${WHITE_BOLD}Flags${NC}
  ${GREEN}<none>${NC}  show all unread notifications
  ${GREEN}-a    ${NC}  show all (read/ unread) notifications
  ${GREEN}-r    ${NC}  mark all notifications as read
  ${GREEN}-e    ${NC}  exclude notifications matching a string (REGEX support)
  ${GREEN}-f    ${NC}  filter notifications matching a string (REGEX support)
  ${GREEN}-s    ${NC}  print a static display
  ${GREEN}-n NUM${NC}  max number of notifications to show
  ${GREEN}-p    ${NC}  show only participating or mentioned notifications
  ${GREEN}-w    ${NC}  display the preview window in interactive mode
  ${GREEN}-h    ${NC}  show the help page

${WHITE_BOLD}Key Bindings fzf${NC}
  ${GREEN}?        ${NC}  toggle help
  ${GREEN}enter    ${NC}  print and mark the notification as read and quit
  ${GREEN}tab      ${NC}  toggle preview notification
  ${GREEN}shift+tab${NC}  change preview window size
  ${GREEN}shift+↑↓ ${NC}  scroll the preview up/ down
  ${GREEN}ctrl+b   ${NC}  open notification in browser
  ${GREEN}ctrl+d   ${NC}  view diff
  ${GREEN}ctrl+p   ${NC}  view diff in patch format
  ${GREEN}ctrl+r   ${NC}  mark all displayed notifications as read and reload
  ${GREEN}ctrl+t   ${NC}  mark notification as read and reload
  ${GREEN}ctrl+x   ${NC}  write a comment with the editor and quit
  ${GREEN}esc      ${NC}  quit

${WHITE_BOLD}Example${NC}
    # View the last 20 notifications
    gh notify -an 20
EOF
)

include_all_flag='false'
preview_window_visibility='hidden'
only_participating_flag='false'
print_static_flag='false'
mark_read_flag='false'
num_notifications='0'
exclusion_string='XXX_BOGUS_STRING_THAT_SHOULD_NOT_EXIST_XXX'
filter_string=''
# this flag outputs all items in the list that fzf receives as an input
# it is not listed as an official flag in the docs, as it is used for reloading fzf only
print_fzf_static_reload_flag='false'

# UTC time ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api#timezones
timestamp=$(date +"%Y-%m-%dT%H:%M:%SZ")
# https://github.com/mislav/gh-branch/blob/main/gh-branch#L105
# this trick only works with the '-s' and '-z' flag
reload_arguments="$0 $* -sz"

while getopts 'e:f:n:pawhsrz' flag; do
    case "${flag}" in
    n) num_notifications="${OPTARG}" ;;
    e) exclusion_string="${OPTARG}" ;;
    f) filter_string="${OPTARG}" ;;
    a) include_all_flag='true' ;;
    w) preview_window_visibility='nohidden' ;;
    p) only_participating_flag='true' ;;
    s) print_static_flag='true' ;;
    r) mark_read_flag='true' ;;
    z) print_fzf_static_reload_flag='true' ;;
    h)
        # the -e option to enable the interpretation of backslash escapes,
        # so that the ANSI escape sequences are correctly interpreted as color codes
        echo -e "$HELP_TEXT"
        exit 0
        ;;
    *)
        echo -e "$HELP_TEXT"
        exit 1
        ;;
    esac
done

# for comparing multi-digit version numbers https://apple.stackexchange.com/a/123408/11374
version() {
    echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

get_notifs() {
    page_num=$1
    if [ "$page_num" == "" ]; then
        page_num=1
    fi
    local_page_size=100
    if [ "$num_notifications" != "0" ]; then
        local_page_size=$num_notifications
    fi
    printf >&2 "." # "marching ants" because sometimes this takes a bit.
    # Use '-F/--field' to pass a variable that is a number, Boolean, or null. Use '-f/--raw-field' for other variables.
    # shellcheck disable=SC2016
    gh api --header "$GH_REST_API_VERSION" --method GET notifications --cache=0s \
        --field per_page="$local_page_size" --field page="$page_num" \
        --field participating="$only_participating_flag" --field all="$include_all_flag" \
        --jq \
        'def colors:
        {
            "cyan": "\u001b[36m",
            "cyan_bold": "\u001b[1;36m",
            "gray": "\u001b[90m",
            "green": "\u001b[32m",
            "magenta": "\u001b[35m",
            "reset": "\u001b[0m"
        };
        def colored(text; color):
            colors[color] + text + colors.reset;
        .[] | {
            hidden_COMMENT: "Hidden data points without color codes used in GraphQL query",
            hidden_updated_at: .updated_at | fromdateiso8601 | strftime("%Y-%m"),
            hidden_repository_full_name: .repository.full_name,
            iso8601: now | strftime("%Y-%m-%dT%H:%M:%SZ"),
            thread_id: .id,
            thread_state: (if .unread then "UNREAD" else "READ" end),
            timefmt: colored(.updated_at | fromdateiso8601 | strftime("%d/%b %H:%M"); "gray"),
            owner: colored(.repository.owner.login; "cyan"),
            name: colored(.repository.name; "cyan_bold"),
            type: .subject.type,
            url: (if .subject.url then .subject.url else "NONE" end),
            unread_symbol: colored((if .unread then "\u25cf" else "\u00a0" end);"magenta"),
            title: .subject.title
        } |
        "\(.hidden_updated_at)\t\(.hidden_repository_full_name)\t\(.iso8601)\t\(.thread_id)\t\(.thread_state)\t\(.timefmt)\t\(.owner)\/\(.name)\t\(.type)\t\(.url)\t\(.unread_symbol)\t\(.title)"'
}

print_notifs() {
    local graphql_query_discussion
    all_notifs=""
    page_num=1
    while true; do
        page=$(get_notifs $page_num)
        if [ "$page" == "" ]; then
            break
        else
            page_num=$((page_num + 1))
        fi
        new_notifs=$(
            echo "$page" | while IFS=$'\t' read -r hidden_updated_at hidden_repository_full_name iso8601 thread_id thread_state timefmt repo type url unread_symbol title number; do
                if grep -q "Discussion" <<<"$type"; then
                    graphql_query_discussion=$'query ($filter: String!) { search(query: $filter, type: DISCUSSION, first: 1) { nodes { ... on Discussion { number }}}}'
                    # https://docs.github.com/en/search-github/searching-on-github/searching-discussions
                    number=$(gh api graphql --cache=100h --raw-field filter="$title in:title updated:>=$hidden_updated_at repo:$hidden_repository_full_name" --raw-field query="$graphql_query_discussion" --jq '.data.search.nodes | .[].number')
                elif ! grep -q "^NONE" <<<"$url"; then
                    if grep -q "Commit" <<<"$type"; then
                        number=$(basename "$url" | head -c 7)
                    elif grep -q "Release" <<<"$type"; then
                        if gh api --cache=20s --header "$GH_REST_API_VERSION" --method GET "$url" --silent 2>/dev/null; then
                            release_info=()
                            while IFS='' read -r line; do release_info+=("$line"); done < <(gh api --cache=20s --header "$GH_REST_API_VERSION" --method GET "$url" --jq '.tag_name, .prerelease')
                            number="${release_info[0]}"
                            "${release_info[1]}" && type="Pre-release"
                        else
                            continue
                        fi
                    else
                        # gh api calls cost time, try to avoid them as much as possible
                        number=${url/*\//#}
                    fi
                fi

                printf "\n%s\t%s\t%s\t%s\t%s\t%s ${GREEN}%s${NC} %s\t%s\n" "$iso8601" "$thread_id" "$thread_state" "$timefmt" "$repo" "$type" "$number" "$unread_symbol" "$title"
            done
        )
        all_notifs="$all_notifs$new_notifs"
        # this is going to be a bit funky.
        # if you specify a number larger than 100
        # GitHub will ignore it and give you only 100
        if [ "$num_notifications" != "0" ]; then
            break
        fi
    done
    # clear the dots we printed
    echo >&2 -e "\r\033[K"

    echo "$all_notifs" | grep -v "$exclusion_string" | grep "$filter_string" | column -t -s $'\t'
}

select_notif() {
    local notif_msg diff_pager open_notification_browser preview_notification selection key repo type num
    notif_msg="$1"
    # https://dandavison.github.io/delta
    diff_pager=$'if type -p delta >/dev/null; then delta --width ${FZF_PREVIEW_COLUMNS:-$COLUMNS}; else cat; fi'
    open_notification_browser='if grep -q CheckSuite <<<{7}; then open https://github.com/{6}/actions ; elif grep -q Commit <<<{7}; then gh browse {8} -R {6} ; elif grep -q Discussion <<<{7}; then open https://github.com/{6}/discussions/{8} ; elif grep -qE "Issue|PullRequest" <<<{7}; then gh issue view {8} -wR {6}; elif grep -q "[Rr]elease" <<<{7}; then gh release view {8} -wR {6}; else gh repo view -w {6}; fi'
    preview_notification='echo \[{4} {5} - {7}\] ;if grep -q Issue <<<{7}; then gh issue view {8} -R {6} --comments; elif grep -q PullRequest <<<\"{7}\"; then gh pr view {8} -R {6} --comments; elif grep -q "[Rr]elease" <<<{7}; then gh release view {8} -R {6}; else echo "Notification preview for {7} is not supported."; fi'
    # If this were passed as a function to fzf, it would be called immediately when fzf is called, in spite of the fact that the assigned hotkey was not triggered.
    mark_all_read="gh api --silent --header $GH_REST_API_VERSION --method PUT notifications --raw-field last_read_at={1} --field read=true"
    mark_individual_read="if grep -q UNREAD <<<{3}; then gh api --silent --header $GH_REST_API_VERSION --method PATCH notifications/threads/{2}; fi"

    # See the man page (man fzf) for an explanation of the arguments.
    # The key combination ctrl-m is a synonym for enter,
    # therefore the key to mark notifications as read shall not be ctrl-m.
    selection=$(
        SHELL="bash" fzf <<<"$notif_msg" \
            --ansi --no-multi --with-nth 4.. \
            --delimiter '\s+' \
            --reverse --info=inline --pointer="▶" \
            --border horizontal --color "border:dim" \
            --header "? help · esc quit" --color "header:green:italic:dim" \
            --prompt "GitHub Notifications > " --color "prompt:80,info:40" \
            --bind "change:first" \
            --bind "?:toggle-preview+change-preview:echo -e '$HELP_TEXT'" \
            --bind "ctrl-b:execute-silent:$open_notification_browser" \
            --bind "ctrl-d:toggle-preview+change-preview:if grep -q PullRequest <<<{7}; then gh pr diff {8} -R {6} | $diff_pager; else $preview_notification; fi" \
            --bind "ctrl-p:toggle-preview+change-preview:if grep -q PullRequest <<<{7}; then gh pr diff {8} --patch -R {6} | $diff_pager; else  $preview_notification; fi" \
            --bind "ctrl-r:execute-silent($mark_all_read)+reload:$reload_arguments" \
            --bind "ctrl-t:execute-silent($mark_individual_read)+reload:$reload_arguments" \
            --bind "tab:toggle-preview+change-preview:$preview_notification" \
            --bind "btab:change-preview-window(75%:nohidden|75%:down:nohidden:border-top|nohidden)" \
            --preview-window wrap:"$preview_window_visibility":50%:right:border-left \
            --preview "$preview_notification" \
            --expect "enter,esc,ctrl-x" | tr '\n' ' '
    )

    # actions that close fzf are defined below
    read -r key _ thread_id thread_state _ _ repo type num _ <<<"$selection"
    [[ -z "$type" ]] && exit 0
    case "$key" in
    enter)
        if grep -q "Issue" <<<"$type"; then
            gh issue view "$num" -R "$repo" --comments
        elif grep -q "PullRequest" <<<"$type"; then
            gh pr view "$num" -R "$repo" --comments
        elif grep -q "[Rr]elease" <<<"$type"; then
            gh release view "$num" -R "$repo"
        else
            echo "Notification preview for $type is not supported."
        fi

        if grep -q UNREAD <<<"$thread_state"; then
            gh api --silent --header $GH_REST_API_VERSION --method PATCH notifications/threads/"$thread_id" ||
                { echo "Failed to mark notification as read." >&2 && exit 1; }
        fi
        ;;
    esc) exit 0 ;;
    ctrl-x)
        if grep -qE "Issue|PullRequest" <<<"$type"; then
            gh issue comment "${num}" -R "$repo"
        else
            echo "Writing comments for $type is not supported."
        fi
        ;;
    esac
}

# quick check if you can connect to the GitHub API
if ! gh api --silent --header "$GH_REST_API_VERSION" zen; then
    exit 1
fi
if [[ $mark_read_flag == "true" ]]; then
    gh api --header "$GH_REST_API_VERSION" --method PUT notifications --raw-field last_read_at="$timestamp" --field read=true --silent
    exit 0
fi

notifs="$(print_notifs)"
if [[ -z "$notifs" ]]; then
    # TODO: exit fzf when the list is empty.
    # 3x NO-BREAK SPACE when fzf is reloaded and the list is empty,
    # this message is displayed and the first three elements are hidden.
    echo "      All caught up!"
    exit 0
elif [[ $print_static_flag == "false" ]]; then
    if ! type -p fzf >/dev/null; then
        echo "error: install \`fzf\` or use the -s flag" >&2
        exit 1
    fi
    USER_FZF_VERSION="$(fzf --version)"
    if [ "$(version $MIN_FZF_VERSION)" -gt "$(version "$USER_FZF_VERSION")" ]; then
        echo "Error: \`fzf\` was found, but it is too old".
        echo "Your \`fzf\` version is: $USER_FZF_VERSION".
        echo "Minimum required \`fzf\` version is: $MIN_FZF_VERSION"
        exit 1
    fi
    select_notif "$notifs"
elif [[ $print_fzf_static_reload_flag == "true" ]]; then
    # this here is used as input for fzf when reloading,
    # it should not be truncated as this would affect the functionality in fzf
    echo "$notifs"
else
    # remove the first two eleemnts from the static display
    # '[[:blank:]]' matches horizontal whitespace characters (spaces/ tabs)
    echo "$notifs" | sed -E 's/^([^[:blank:]]+[[:blank:]]+){3}//'
fi
