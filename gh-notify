#!/usr/bin/env bash
# https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin
set -eo pipefail
# The minimum fzf version that the user needs to run all interactive commands.
MIN_FZF_VERSION="0.29.0"

# export variables for use in child processes
# https://docs.github.com/en/rest/overview/api-versions
export GH_REST_API_VERSION="X-GitHub-Api-Version:2022-11-28"
# Enable terminal-style output even when the output is redirected.
export GH_FORCE_TTY=100%
# Disable the gh pager
export GH_PAGER="cat"

# NotificationReason:
# assign, author, comment, invitation, manual, mention, review_requested, security_alert, state_change, subscribed, team_mention, ci_activity
# NotificationSubjectTypes:
# CheckSuite, Commit, Discussion, Issue, PullRequest, Release, RepositoryVulnerabilityAlert, ...

die() {
    echo ERROR: "$*" >&2
    exit 1
}

# 'SHLVL' variable represents the nesting level of the current shell
export NESTED_START_LVL="$SHLVL"
export FINAL_MSG='All caught up!'
# color codes
export GREEN='\033[0;32m'
export DARK_GRAY='\033[0;90m'
export NC='\033[0m'
export WHITE_BOLD='\033[1m'

# Create help message with colored text
# IMPORTANT: Keep it synchronized with the README, but without the Examples.
# IMPORTANT: Use an unquoted delimiter (EOF) to have the variables expanded.
print_help_text() {
    local help_text
    help_text=$(
        cat <<EOF
${WHITE_BOLD}Usage${NC}
  gh notify [Flags]

${WHITE_BOLD}Flags${NC}
  ${GREEN}<none>${NC}  show all unread notifications
  ${GREEN}-a    ${NC}  show all (read/ unread) notifications
  ${GREEN}-e    ${NC}  exclude notifications matching a string (REGEX support)
  ${GREEN}-f    ${NC}  filter notifications matching a string (REGEX support)
  ${GREEN}-h    ${NC}  show the help page
  ${GREEN}-n NUM${NC}  max number of notifications to show
  ${GREEN}-p    ${NC}  show only participating or mentioned notifications
  ${GREEN}-r    ${NC}  mark all notifications as read
  ${GREEN}-s    ${NC}  print a static display
  ${GREEN}-u URL${NC}  (un)subscribe a URL, useful for issues/prs of interest
  ${GREEN}-w    ${NC}  display the preview window in interactive mode

${WHITE_BOLD}Key Bindings fzf${NC}
  ${GREEN}?        ${NC}  toggle help
  ${GREEN}enter    ${NC}  print the selected notification, mark it as read and quit
  ${GREEN}tab      ${NC}  toggle notification preview
  ${GREEN}shift+tab${NC}  resize the preview window
  ${GREEN}shift+↑↓ ${NC}  scroll the preview up/ down
  ${GREEN}ctrl+a   ${NC}  mark all displayed notifications as read and reload
  ${GREEN}ctrl+b   ${NC}  browser
  ${GREEN}ctrl+d   ${NC}  view diff
  ${GREEN}ctrl+p   ${NC}  view diff in patch format
  ${GREEN}ctrl+r   ${NC}  reload
  ${GREEN}ctrl+t   ${NC}  mark the selected notification as read and reload
  ${GREEN}ctrl+x   ${NC}  write a comment with the editor and quit
  ${GREEN}esc      ${NC}  quit

${WHITE_BOLD}Example${NC}
    # Display the last 20 notifications
    gh notify -an 20
EOF
    )
    echo -e "$help_text"
}

export exclusion_string='XXX_BOGUS_STRING_THAT_SHOULD_NOT_EXIST_XXX'
export filter_string=''
export num_notifications='0'
export only_participating_flag='false'
export include_all_flag='false'
export preview_window_visibility='hidden'
# not necessarily to be exported, since they are not used in any child process
print_static_flag='false'
mark_read_flag='false'
update_subscription_url=''

while getopts 'e:f:n:u:pawhsr' flag; do
    case "${flag}" in
        e) exclusion_string="${OPTARG}" ;;
        f) filter_string="${OPTARG}" ;;
        u) update_subscription_url="${OPTARG}" ;;
            a) include_all_flag='true' ;;
        w) preview_window_visibility='nohidden' ;;
        s) print_static_flag='true' ;;
        r) mark_read_flag='true' ;;
        h)
            print_help_text
            exit 0
            ;;
        *)
            die "see 'gh notify -h' for help"
            ;;
    esac
done

get_notifs() {
    local page_num local_page_size
    page_num="${1:-1}"
    local_page_size=100
    if [ "$num_notifications" != "0" ]; then
        local_page_size=$num_notifications
    fi
    printf >&2 "." # "marching ants" because sometimes this takes a bit.
    # Use '-F/--field' to pass a variable that is a number, Boolean, or null. Use '-f/--raw-field' for other variables.
    # Playground to test jq: https://jqplay.org/
    gh api --header "$GH_REST_API_VERSION" --method GET notifications --cache=0s \
        --field per_page="$local_page_size" --field page="$page_num" \
        --field participating="$only_participating_flag" --field all="$include_all_flag" \
        --jq \
        'def colors:
        {
            "cyan": "\u001b[36m",
            "cyan_bold": "\u001b[1;36m",
            "gray": "\u001b[90m",
            "magenta": "\u001b[35m",
            "reset": "\u001b[0m"
        };
        def colored(text; color):
            colors[color] + text + colors.reset;
        .[] | {
            updated_short: .updated_at | fromdateiso8601 | strftime("%Y-%m"),
            full_name: .repository.full_name,
            # UTC time ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
            # https://docs.github.com/en/rest/overview/resources-in-the-rest-api#timezones
            iso8601: now | strftime("%Y-%m-%dT%H:%M:%SZ"),
            thread_id: .id,
            thread_state: (if .unread then "UNREAD" else "READ" end),
            comment_url: .subject.latest_comment_url | tostring | split("/") | last,
            timefmt: colored(.updated_at | fromdateiso8601 | strftime("%d/%b %H:%M"); "gray"),
            owner: colored(.repository.owner.login; "cyan"),
            name: colored(.repository.name; "cyan_bold"),
            type: .subject.type,
            # Some infos have to be pulled from this URL in later steps, so no string modifications.
            url: .subject.url | tostring,
            unread_symbol: colored((if .unread then "\u25cf" else "\u00a0" end);"magenta"),
            title: .subject.title
        } | ["updated:>=\(.updated_short) repo:\(.full_name)", .iso8601, .thread_id, .thread_state, .comment_url, .timefmt, "\(.owner)/\(.name)", .type, .url, .unread_symbol, .title ] | @tsv'
}

print_notifs() {
    local all_notifs page_num page new_notifs graphql_query_discussion result
    all_notifs=''
    page_num=1
    graphql_query_discussion=$'query ($filter: String!) { search(query: $filter, type: DISCUSSION, first: 1) { nodes { ... on Discussion { number }}}}'
    while true; do
        page=$(get_notifs $page_num) || die "Failed to get notifications."
        if [ "$page" == "" ]; then
            break
        else
            page_num=$((page_num + 1))
        fi
        new_notifs=$(
            echo "$page" | while IFS=$'\t' read -r qualifier iso8601 thread_id thread_state comment_url timefmt repo type url unread_symbol title number; do
                if grep -q "Discussion" <<<"$type"; then
                    # https://docs.github.com/en/search-github/searching-on-github/searching-discussions
                    number=$(gh api graphql --cache=100h --raw-field filter="$title in:title $qualifier" \
                        --raw-field query="$graphql_query_discussion" --jq '.data.search.nodes | .[].number') ||
                        die "Failed GraphQL discussion query."
                elif ! grep -q "^null" <<<"$url"; then
                    if grep -q "Commit" <<<"$type"; then
                        number=$(basename "$url" | head -c 7)
                    elif grep -q "Release" <<<"$type"; then
                        # directly read the output into number and prerelease variables
                        if IFS=$'\t' read -r number prerelease < <(gh api --cache=100h --header "$GH_REST_API_VERSION" \
                            --method GET "$url" --jq '[.tag_name, .prerelease] | @tsv'); then
                            "$prerelease" && type="Pre-release"
                        else
                            # it may happen that URLs are retrieved but are already dead and therefore skipped
                            continue
                        fi
                    else
                        # gh api calls cost time, try to avoid them as much as possible
                        number=${url/*\//#}
                    fi
                fi
                printf "\n%s\t%s\t%s\t%s\t%s\t%s\t%s %b%s%b %s\t%s\n" \
                    "$iso8601" "$thread_id" "$thread_state" "$comment_url" "$timefmt" \
                    "$repo" "$type" "$GREEN" "$number" "$NC" "$unread_symbol" "$title"
            done
        ) || die "Something went wrong"
        all_notifs="$all_notifs$new_notifs"
        # this is going to be a bit funky.
        # if you specify a number larger than 100
        # GitHub will ignore it and give you only 100
        [[ $num_notifications != "0" ]] && break
    done
    # clear the dots we printed
    echo >&2 -e "\r\033[K"

    result=$(echo "$all_notifs" | grep -v "$exclusion_string" | grep "$filter_string" | column -ts $'\t')
    # if the value is greater than the initial start value, we assume to be in the 'fzf’ reload function
    if [[ -z $result && $SHLVL -gt $NESTED_START_LVL ]]; then
        # TODO: exit fzf automatically if the list is empty after a reload
        # it does work with '--bind "zero:become:"', but this only came with version '0.40.0'
        # workaround, since fzf hides the first elements with '--with-nth 5..'
        # if the list is empty on a reload, the message would be hidden, so ' \b' (backspace) is added
        echo -e " \b \b \b \b$FINAL_MSG"
    else
        echo "$result"
    fi
}

diff_pager() {
    if type -p delta >/dev/null; then
        # https://dandavison.github.io/delta
        delta --width "${FZF_PREVIEW_COLUMNS:-$COLUMNS}"
    elif type -p bat >/dev/null; then
        # https://github.com/sharkdp/bat
        bat --plain --language diff
    else
        cat
    fi
}

open_in_browser() {
    local comment_number date time repo type number unhashed_num
    IFS=' ' read -r _ _ _ comment_number date time repo type number _ <<<"$1"
    unhashed_num=$(tr -d "#" <<<"$number")
    case "$type" in
        CheckSuite)
            python -m webbrowser "https://github.com/${repo}/actions"
            ;;
        Commit)
            gh browse "$number" --repo "$repo"
            ;;
        Discussion)
            python -m webbrowser "https://github.com/${repo}/discussions/${number}"
            ;;
        Issue | PullRequest)
            if [[ $comment_number == "$unhashed_num" || $comment_number == null ]]; then
                gh issue view "$number" --web --repo "$repo"
            else
                python -m webbrowser "https://github.com/${repo}/issues/${unhashed_num}#issuecomment-${comment_number}"
            fi
            ;;
        Pre-release | Release)
            gh release view "$number" --web --repo "$repo"
            ;;
        *)
            gh repo view --web "$repo"
            ;;
    esac
}

view_notification() {
    local date time repo type number
    IFS=' ' read -r _ _ _ _ date time repo type number _ <<<"$1"
    printf "[%s %s - %s]\n" "$date" "$time" "$type"
    case "$type" in
        Issue)
            gh issue view "$number" --repo "$repo" --comments
            ;;
        PullRequest)
            gh pr view "$number" --repo "$repo" --comments
            ;;
        Pre-release | Release)
            gh release view "$number" --repo "$repo"
            ;;
        *)
            printf "Seeing the preview of a %b%s%b is not supported.\n" "$WHITE_BOLD" "$type" "$NC"
            ;;
    esac
}

mark_all_read() {
    local iso_time
    IFS=' ' read -r iso_time _ <<<"$1"
    # https://docs.github.com/en/rest/activity/notifications#mark-notifications-as-read
    gh api --silent --header "$GH_REST_API_VERSION" --method PUT notifications \
        --raw-field last_read_at="$iso_time" --field read=true
}

mark_individual_read() {
    local thread_id thread_state
    IFS=' ' read -r _ thread_id thread_state _ <<<"$1"
    if [ "$thread_state" = UNREAD ]; then
        gh api --silent --header "$GH_REST_API_VERSION" --method PATCH "notifications/threads/${thread_id}"
    fi
}

select_notif() {
    local output expected_key selected_line repo type num
    # make functions available in child processes
    # 'SHELL="bash"' is needed, as it would typical fail on macOS that uses,
    # 'zsh' by default, which doesn't support exporting functions this way
    export -f print_help_text print_notifs get_notifs
    export -f diff_pager open_in_browser view_notification
    export -f mark_all_read mark_individual_read
    # The 'die' function is not exported because 'fzf' warns you about the error in
    # a failed 'print_notifs' call, but does not display the message.

    # See the man page (man fzf) for an explanation of the arguments.
    # '--print-query' and '--delimiter' are not strictly needed here,
    # but a user could have them in their ‘FZF_DEFAULT_OPTS’
    # and so the lines would get screwed up and fail if we don't take that into account.
    output=$(
        SHELL="bash" fzf <<<"$1" \
            --ansi --no-multi --with-nth 5.. \
            --delimiter '\s+' --print-query \
            --reverse --info=inline --pointer="▶" \
            --border horizontal --color "border:dim" \
            --header "? help · esc quit" --color "header:green:italic:dim" \
            --prompt "GitHub Notifications > " --color "prompt:80,info:40" \
            --bind "change:first" \
            --bind "?:toggle-preview+change-preview:print_help_text" \
            --bind "ctrl-a:execute-silent(mark_all_read {})+reload:print_notifs || true" \
            --bind "ctrl-b:execute-silent:open_in_browser {}" \
            --bind "ctrl-d:toggle-preview+change-preview:if grep -q PullRequest <<<{8}; then gh pr diff {9} --repo {7}  | diff_pager; else view_notification {}; fi" \
            --bind "ctrl-p:toggle-preview+change-preview:if grep -q PullRequest <<<{8}; then gh pr diff {9} --patch --repo {7} | diff_pager; else view_notification {}; fi" \
            --bind "ctrl-r:reload:print_notifs || true" \
            --bind "ctrl-t:execute-silent(mark_individual_read {})+reload:print_notifs || true" \
            --bind "tab:toggle-preview+change-preview:view_notification {}" \
            --bind "btab:change-preview-window(75%:nohidden|75%:down:nohidden:border-top|nohidden)" \
            --preview-window "wrap:${preview_window_visibility}:50%:right:border-left" \
            --preview "view_notification {}" \
            --expect "enter,esc,ctrl-x"
    )
    # actions that close fzf are defined below
    # 1st line ('--print-query'): the input query string
    # 2nd line ('--expect'): the actual key
    # 3rd line: the selected line when the user pressed the key
    expected_key="$(sed '1d;3d' <<<"$output")"
    selected_line="$(sed '1d;2d' <<<"$output")"
    IFS=' ' read -r _ thread_id thread_state _ _ _ repo type num _ <<<"$selected_line"
    [[ -z $type ]] && exit 0
    case "$expected_key" in
        enter)
            view_notification "$selected_line" || die "Failed to view notification."
            mark_individual_read "$selected_line" || die "Failed to mark the notification as read."
            ;;
        esc)
            # quit with exit code 0; 'fzf' returns 130
            # TODO: when updating to '0.38.0' use '--bind "esc:become:"'
            exit 0
            ;;
        ctrl-x)
            if grep -qE "Issue|PullRequest" <<<"$type"; then
                gh issue comment "$num" --repo "$repo"
            else
                printf "Writing comments is only supported for %bIssues%b and %bPullRequests%b.\n" "$WHITE_BOLD" "$NC" "$WHITE_BOLD" "$NC"
            fi
            mark_individual_read "$selected_line" || die "Failed to mark the notification as read."
            ;;
        *)
            die "Unexpected key '$expected_key'"
            ;;
    esac
}

# for comparing multi-digit version numbers https://apple.stackexchange.com/a/123408/11374
version() {
    awk <<<"$@" -F '.' '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

if [[ -n "$update_subscription_url" ]]; then
    graphql_query_resource=$'query ($url_input: URI!) {resource(url: $url_input) { ... on Subscribable { __typename id viewerCanSubscribe viewerSubscription }}}'
    IFS=$'\t' read -r object_type node_id viewer_can_subscribe viewer_subscription < <(gh api graphql \
        --raw-field url_input="$update_subscription_url" --raw-field query="$graphql_query_resource" \
        --jq '.data.resource | map(.) | @tsv') ||
        { echo "Failed GraphQL query for resource." >&2 && exit 1; }
    if [[ -n "$node_id" ]]; then
        if [[ $viewer_subscription != "SUBSCRIBED" && ! "$viewer_can_subscribe" ]]; then
            echo "You are not allowed to subscribe to this '$object_type'."
            exit 1
        fi
        case "$viewer_subscription" in
        SUBSCRIBED)
            updated_state="UNSUBSCRIBED"
            update_text="Notifications disabled for this '$object_type'."
            ;;
        IGNORED | UNSUBSCRIBED)
            updated_state="SUBSCRIBED"
            update_text="Notifications enabled for this '$object_type'."
            ;;
        *)
            echo "Error: No changes were made to the subscriptions."
            echo "Returned value for current status is unknown: $viewer_subscription"
            exit 1
            ;;
        esac
        graphql_mutation_update_subscription=$'mutation ($updated_state: SubscriptionState!, $node_id: ID!) { updateSubscription(input: {state: $updated_state, subscribableId: $node_id}) { subscribable { viewerSubscription }}}'
        # NOTE: For example, if you "UNSUBSCRIBE" from an Issue but you are still "SUBSCRIBED" to the Repository where the Issue resides, the Issue's subscription status is automatically set to "IGNORED" and can never be set to "UNSUBSCRIBED" as long as you are "SUBSCRIBED" to the Repository. This is a design decision by GitHub.
        # enumValues for the SubscriptionState
        # "UNSUBSCRIBED" - "The User is only notified when participating or @mentioned."
        # "SUBSCRIBED" - "The User is notified of all conversations."
        # "IGNORED" - "The User is never notified."
        updated_state=$(gh api graphql --raw-field updated_state="$updated_state" \
            --raw-field node_id="$node_id" \
            --raw-field query="$graphql_mutation_update_subscription" \
            --jq '.data.updateSubscription.subscribable.viewerSubscription') ||
            { echo "Failed GraphQL mutation to update the subscription status." >&2 && exit 1; }
        echo "The list with all your subscriptions is only available via the Web UI."
        printf "%bhttps://github.com/notifications/subscriptions%b\n\n" "$DARK_GRAY" "$NC"
        printf "%b%s%b: %b%s%b\n" "$GREEN" "$updated_state" "$NC" "$WHITE_BOLD" "$update_text" "$NC"
        printf "%b%s%b\n" "$DARK_GRAY" "$update_subscription_url" "$NC"
        exit 0
    else
        possibleTypes=$(gh api graphql --raw-field query='{ __type(name: "Subscribable") { possibleTypes { name }}}' \
            --jq '.data.__type.possibleTypes | map(.name) | join(", ")' ||
            { echo "Failed GraphQL query for possibleTypes." >&2 && exit 1; })
        printf "The URL is invalid to subscribe to.\nValid subscription types: %b%s%b\n" "$WHITE_BOLD" "$possibleTypes" "$NC"
        exit 1
    fi
fi

gh_notify() {
    local notifs user_fzf_version
    if [ "$mark_read_flag" = "true" ]; then
        mark_all_read "" || die "Failed to mark notifications as read."
        echo "All notifications have been marked as read."
        exit 0
    fi

    notifs="$(print_notifs)"
    if [ -z "$notifs" ]; then
        echo "$FINAL_MSG"
        exit 0
    elif [ $print_static_flag = "false" ]; then
        if ! type -p fzf >/dev/null; then
            die "install 'fzf' or use the -s flag"
        fi
        user_fzf_version="$(fzf --version)"
        if [ "$(version $MIN_FZF_VERSION)" -gt "$(version "$user_fzf_version")" ]; then
            die "The minimum required 'fzf' version is $MIN_FZF_VERSION. Your 'fzf' version is: $user_fzf_version."
        fi
        if ! type -p python >/dev/null; then
            die "install 'Python' or use the -s flag"
        fi
        select_notif "$notifs"
    else
        # remove unimportant elements from the static display
        # '[[:blank:]]' matches horizontal whitespace characters (spaces/ tabs)
        echo "$notifs" | sed -E 's/^([^[:blank:]]+[[:blank:]]+){4}//'
    fi
}

gh_notify
