#!/usr/bin/env bash
set -eo pipefail

# https://docs.github.com/en/rest/overview/api-versions
GH_REST_API_VERSION="2022-11-28"
# The minimum fzf version that the user needs to run all interactive commands.
MIN_FZF_VERSION="0.29.0"

# Enable terminal-style output even when the output is redirected.
export GH_FORCE_TTY=100%
# Disable the gh pager
export GH_PAGER="cat"

# NotificationReason:
# assign, author, comment, invitation, manual, mention, review_requested, security_alert, state_change, subscribed, team_mention, ci_activity
# NotificationSubjectTypes:
# CheckSuite, Commit, Discussion, Issue, PullRequest, Release, RepositoryVulnerabilityAlert, ...

GREEN='\033[0;32m'
NC='\033[0m'
WHITE_BOLD='\033[1m'

# Create help message with colored text
# IMPORTANT: Keep it synchronized with the README, but without the Examples.
# IMPORTANT: Use an unquoted delimiter (EOF) to have the variables expanded.
HELP_TEXT=$(
    cat <<EOF
${WHITE_BOLD}Usage${NC}
  gh notify [Flags]

${WHITE_BOLD}Flags${NC}
  ${GREEN}<none>${NC}  show all unread notifications
  ${GREEN}-a    ${NC}  show all (read/ unread) notifications
  ${GREEN}-r    ${NC}  mark all notifications as read
  ${GREEN}-e    ${NC}  exclude notifications matching a string (REGEX support)
  ${GREEN}-f    ${NC}  filter notifications matching a string (REGEX support)
  ${GREEN}-s    ${NC}  print a static display
  ${GREEN}-n NUM${NC}  max number of notifications to show
  ${GREEN}-p    ${NC}  show only participating or mentioned notifications
  ${GREEN}-w    ${NC}  display the preview window in interactive mode
  ${GREEN}-h    ${NC}  show the help page

${WHITE_BOLD}Key Bindings fzf${NC}
  ${GREEN}?        ${NC}  toggle help
  ${GREEN}enter    ${NC}  print notification and exit
  ${GREEN}tab      ${NC}  toggle preview notification
  ${GREEN}shift+tab${NC}  change preview window size
  ${GREEN}shift+↑↓ ${NC}  scroll the preview up/ down
  ${GREEN}ctrl+b   ${NC}  open notification in browser
  ${GREEN}ctrl+d   ${NC}  view diff
  ${GREEN}ctrl+p   ${NC}  view diff in patch format
  ${GREEN}ctrl+r   ${NC}  mark all displayed notifications as read and reload
  ${GREEN}ctrl+x   ${NC}  write a comment with the editor and exit
  ${GREEN}esc      ${NC}  exit
EOF
)

include_all_flag='false'
preview_window_visibility='hidden'
only_participating_flag='false'
print_static_flag='false'
mark_read_flag='false'
num_notifications='0'
exclusion_string='XXX_BOGUS_STRING_THAT_SHOULD_NOT_EXIST_XXX'
filter_string=''
# UTC time ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api#timezones
timestamp=$(date +"%Y-%m-%dT%H:%M:%S%z")
# https://github.com/mislav/gh-branch/blob/main/gh-branch#L105
# this trick only works with the -s flag
reload_arguments="$0 $* -s"

while getopts 'e:f:n:pawhsr' flag; do
    case "${flag}" in
    n) num_notifications="${OPTARG}" ;;
    e) exclusion_string="${OPTARG}" ;;
    f) filter_string="${OPTARG}" ;;
    a) include_all_flag='true' ;;
    w) preview_window_visibility='nohidden' ;;
    p) only_participating_flag='true' ;;
    s) print_static_flag='true' ;;
    r) mark_read_flag='true' ;;
    h)
        # the -e option to enable the interpretation of backslash escapes,
        # so that the ANSI escape sequences are correctly interpreted as color codes
        echo -e "$HELP_TEXT"
        exit 0
        ;;
    *)
        echo -e "$HELP_TEXT"
        exit 1
        ;;
    esac
done

# for comparing multi-digit version numbers https://apple.stackexchange.com/a/123408/11374
version() {
    echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

get_notifs() {
    page_num=$1
    if [ "$page_num" == "" ]; then
        page_num=1
    fi
    local_page_size=100
    if [ "$num_notifications" != "0" ]; then
        local_page_size=$num_notifications
    fi
    printf >&2 "." # "marching ants" because sometimes this takes a bit.
    gh api --header "X-GitHub-Api-Version:$GH_REST_API_VERSION" --method GET notifications --cache=0s \
        -f per_page="$local_page_size" -f all="$include_all_flag" -f participating="$only_participating_flag" -f page="$page_num" \
        --template '
    {{- range . -}}
        {{- /* Comment: Hidden data points without color codes used in GraphQL query */ -}}
        {{- printf "%s\t%s\t" (timefmt "2006-01" .updated_at) .repository.full_name -}}
        {{- /* COMMENT: timefmt must use the reference time Mon Jan 2 15:04:05 MST 2006 to format a given time */ -}}
        {{- printf "%s\t%s\t%s\t" (timefmt "02/Jan 15:04" .updated_at | color "gray+h") .subject.type .subject.title -}}
        {{- printf "%s%s%s\t" (.repository.owner.login | color "cyan+h") ("/" | color "gray+h") (.repository.name | color "cyan+hb") -}}
        {{- if .subject.url -}}{{- printf "%s\t" .subject.url -}}
            {{- else -}}{{- printf " \t" -}}
        {{- end -}}
        {{- if .unread -}}{{- printf "%s\n" ("●" | color "magenta") -}}
            {{- /* COMMENT: Empty strings are colorized to keep the columns in line. */ -}}
            {{- else -}}{{- printf "%s\n" (" " | color "magenta") -}}
        {{- end -}}
    {{- end -}}'
}

print_notifs() {
    local hidden_updated_at hidden_repository_full_name timefmt type title repo url unread number graphql_query_discussion
    all_notifs=""
    page_num=1
    while true; do
        page=$(get_notifs $page_num)
        if [ "$page" == "" ]; then
            break
        else
            page_num=$((page_num + 1))
        fi
        new_notifs=$(
            echo "$page" | while IFS=$'\t' read -r hidden_updated_at hidden_repository_full_name timefmt type title repo url unread; do
                if grep -q "Discussion" <<<"$type"; then
                    graphql_query_discussion=$'query ($filter: String!) { search(query: $filter, type: DISCUSSION, first: 1) { nodes { ... on Discussion { number }}}}'
                    # https://docs.github.com/en/search-github/searching-on-github/searching-discussions
                    number=$(gh api graphql --cache=100h --raw-field filter="$title in:title updated:>=$hidden_updated_at repo:$hidden_repository_full_name" --raw-field query="$graphql_query_discussion" --jq '.data.search.nodes | .[].number')
                elif grep -q "Commit" <<<"$type"; then
                    number=$(basename "$url" | head -c 7)
                elif grep -q "Release" <<<"$type"; then
                    if grep -q "^http" <<<"$url" && gh api --cache 20s --header "X-GitHub-Api-Version:$GH_REST_API_VERSION" --method GET "$url" --silent 2>/dev/null; then
                        #  URL works
                        release_info=()
                        while IFS='' read -r line; do release_info+=("$line"); done < <(gh api --cache 20s --header "X-GitHub-Api-Version:$GH_REST_API_VERSION" --method GET "$url" --jq '.tag_name, .prerelease')
                        number="${release_info[0]}"
                        "${release_info[1]}" && type="Pre-release"
                    else
                        #  URL does not work, no need to show the notification
                        continue
                    fi
                else
                    # gh api calls cost time, try to avoid them as much as possible
                    # ${variable//search/replace} - https://wiki.bash-hackers.org/syntax/pe
                    number=${url/*\//#}
                fi
                printf "\n%s\t%s\t%s ${GREEN}%s${NC} %s\t%s\n" "$timefmt" "$repo" "$type" "$number" "$unread" "$title"
            done
        )
        all_notifs="$all_notifs$new_notifs"
        # this is going to be a bit funky.
        # if you specify a number larger than 100
        # GitHub will ignore it and give you only 100
        if [ "$num_notifications" != "0" ]; then
            break
        fi
    done
    # clear the dots we printed
    echo >&2 -e "\r\033[K"

    echo "$all_notifs" | grep -v "$exclusion_string" | grep "$filter_string" | column -t -s $'\t'
}

select_notif() {
    local notif_msg diff_pager open_notification_browser preview_notification selection key repo type num
    notif_msg="$1"
    # https://dandavison.github.io/delta
    diff_pager=$'if type -p delta >/dev/null; then delta --width ${FZF_PREVIEW_COLUMNS:-$COLUMNS}; else cat; fi'
    open_notification_browser='if grep -q CheckSuite <<<{4}; then open https://github.com/{3}/actions ; elif grep -q Commit <<<{4}; then gh browse {5} -R {3} ; elif grep -q Discussion <<<{4}; then open https://github.com/{3}/discussions/{5} ; elif grep -qE "Issue|PullRequest" <<<{4}; then gh issue view {5} -wR {3}; elif grep -q "[Rr]elease" <<<{4}; then gh release view {5} -wR {3}; else gh repo view -w {3}; fi'
    preview_notification='echo \[{1} {2} - {4}\] ;if grep -q Issue <<<{4}; then gh issue view {5} -R {3} --comments; elif grep -q PullRequest <<<\"{4}\"; then gh pr view {5} -R {3} --comments; elif grep -q "[Rr]elease" <<<{4}; then gh release view {5} -R {3}; else echo "Notification preview for {4} is not supported."; fi'
    # If this were passed as a function to fzf, it would be called immediately when fzf is called, in spite of the fact that the assigned hotkey was not triggered.
    fzf_mark_read="gh api --header X-GitHub-Api-Version:$GH_REST_API_VERSION --method PUT notifications -f last_read_at=$timestamp -F read=true --silent"

    # See the man page (man fzf) for an explanation of the arguments.
    # The key combination ctrl-m is a synonym for enter,
    # therefore the key to mark notifications as read shall not be ctrl-m.
    selection=$(
        SHELL="bash" fzf <<<"$notif_msg" \
            --ansi --no-multi \
            --reverse --info=inline --pointer="▶" \
            --border horizontal --color "border:dim" \
            --header "? Help · esc Quit" --color "header:green:italic:dim" \
            --prompt "GitHub Notifications > " --color "prompt:80,info:40"\
            --bind "change:first" \
            --bind "?:toggle-preview+change-preview:echo -e '$HELP_TEXT'" \
            --bind "ctrl-b:execute-silent:$open_notification_browser" \
            --bind "ctrl-d:toggle-preview+change-preview:if grep -q PullRequest <<<{4}; then gh pr diff {5} -R {3} | $diff_pager; else $preview_notification; fi" \
            --bind "ctrl-p:toggle-preview+change-preview:if grep -q PullRequest <<<{4}; then gh pr diff {5} --patch -R {3} | $diff_pager; else  $preview_notification; fi" \
            --bind "ctrl-r:+execute-silent($fzf_mark_read)+reload:$reload_arguments" \
            --bind "tab:toggle-preview+change-preview:$preview_notification" \
            --bind "btab:change-preview-window(75%:nohidden|75%:down:nohidden:border-top|nohidden)" \
            --preview-window wrap:"$preview_window_visibility":50%:right:border-left \
            --preview "$preview_notification" \
            --expect "enter,esc,ctrl-x" | tr '\n' ' '
    )

    # actions that close fzf are defined below
    read -r key _ _ repo type num _ <<<"$selection"
    [[ -z "$type" ]] && exit 0
    case "$key" in
    enter)
        if grep -q "Issue" <<<"$type"; then
            gh issue view "$num" -R "$repo" --comments
        elif grep -q "PullRequest" <<<"$type"; then
            gh pr view "$num" -R "$repo" --comments
        elif grep -q "[Rr]elease" <<<"$type"; then
            gh release view "$num" -R "$repo"
        else
            echo "Notification preview for $type is not supported."
        fi
        ;;
    esc) exit 0 ;;
    ctrl-x)
        if grep -qE "Issue|PullRequest" <<<"$type"; then
            gh issue comment "${num}" -R "$repo"
        else
            echo "Writing comments for $type is not supported."
        fi
        ;;
    esac
}

if [[ $mark_read_flag == "true" ]]; then
    gh api --header "X-GitHub-Api-Version:$GH_REST_API_VERSION" --method PUT notifications -f last_read_at="$timestamp" -F read=true --silent
    exit 0
fi

notifs="$(print_notifs)"
if [[ -z "$notifs" ]]; then
    echo "All caught up!"
    exit 0
elif [[ $print_static_flag == "false" ]]; then
    if ! type -p fzf >/dev/null; then
        echo "error: install \`fzf\` or use the -s flag" >&2
        exit 1
    fi
    USER_FZF_VERSION="$(fzf --version)"
    if [ "$(version $MIN_FZF_VERSION)" -gt "$(version "$USER_FZF_VERSION")" ]; then
        echo "Error: \`fzf\` was found, but it is too old".
        echo "Your \`fzf\` version is: $USER_FZF_VERSION".
        echo "Minimum required \`fzf\` version is: $MIN_FZF_VERSION"
        exit 1
    fi

    select_notif "$notifs"
else
    echo "$notifs"
fi
