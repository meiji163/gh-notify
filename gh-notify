#!/usr/bin/env bash
set -e -o pipefail

Args="$*"
help() {
    cat <<EOF
Usage: gh notify [--flags]

View and search GitHub notifications.
Select a pull request or issue to get more info on it.

Flags:
    -a      include all notifications
    -w      display the fzf preview window (default: hidden)
    -e      exclude notifications matching a string
            Ex. gh notify -e "MyDayJob"
    -f      filter to only notifications matching a string
            Ex. gh notify -f "CoolRepo"
    -n      max number of notifications to show (capped at 100)
            Not specifying will retrieve all notifications.
    -p      show only participating or mention notifications
    -r      mark all notifications as read
    -s      print a static display

Note: -e and -f both support GNU regular expressions.
      -n limits the number in the 1st page of results
         and happens before -e or -f are applied
EOF
}

include_all_flag='false'
preview_window_visibility='hidden'
only_participating_flag='false'
print_static_flag='false'
mark_read_flag='false'
num_notifications='0'
exclusion_string='XXX_BOGUS_STRING_THAT_SHOULD_NOT_EXIST_XXX'
filter_string=''

while getopts 'e:f:n:pawhsr' flag; do
    case "${flag}" in
    n) num_notifications="${OPTARG}" ;;
    e) exclusion_string="${OPTARG}" ;;
    f) filter_string="${OPTARG}" ;;
    a) include_all_flag='true' ;;
    w) preview_window_visibility='nohidden' ;;
    p) only_participating_flag='true' ;;
    s) print_static_flag='true' ;;
    r) mark_read_flag='true' ;;
    h)
        help
        exit 0
        ;;
    *)
        help
        exit 1
        ;;
    esac
done

get_notifs() {
    page_num=$1
    if [ "$page_num" == "" ]; then
        page_num=1
    fi
    local_page_size=100
    if [ "$num_notifications" != "0" ]; then
        local_page_size=$num_notifications
    fi
    printf >&2 "." # "marching ants" because sometimes this takes a bit.
    # timefmt must use the reference time Mon Jan 2 15:04:05 MST 2006 to format a given time
    gh api -X GET notifications --cache=20s \
        -f per_page="$local_page_size" -f all="$include_all_flag" -f participating="$only_participating_flag" -f page="$page_num" \
        --template '
    {{- range . -}}
        {{- printf "%s\t%s\t%s\t" (timefmt "02/Jan 15:04" .updated_at | color "gray+h") .subject.type .subject.title -}}
        {{- printf "%s\t" (.repository.full_name | color "blue+b") -}}
        {{- if eq .subject.type "Release" -}} {{- printf "%s\t" ("✓" | color "green") -}}
        {{- else -}} {{- printf "%s\t" (.subject.url | color "green") -}} {{- end -}}
        {{- if .unread -}} {{- printf "%s\n" ("●" | color "magenta") -}}
        {{- else -}} {{- printf "%s\n" (" " | color "magenta") -}} {{- end -}}
    {{- end -}}'
}

print_notifs() {
    local timefmt type title repo url unread
    all_notifs=""
    page_num=1
    while true; do
        page=$(get_notifs $page_num)
        if [ "$page" == "" ]; then
            break
        else
            page_num=$((page_num + 1))
        fi
        new_notifs=$(
            echo "$page" | while IFS=$'\t' read -r timefmt type title repo url unread; do
                # "${variable//search/replace}" keep the green color but remove everything between http and the very last slash symbol
                # https://wiki.bash-hackers.org/syntax/pe
                printf "\n%s\t%s\t%s %s %s\t%s\n" "${timefmt}" "${repo}" "${type}" "${url/http*\//#}" "${unread}" "${title}"
            done
        )
        all_notifs="$all_notifs$new_notifs"
        # this is going to be a bit funky.
        # if you specify a number larger than 100
        # GitHub will ignore it and give you only 100
        if [ "$num_notifications" != "0" ]; then
            break
        fi
    done
    # clear the dots we printed
    echo >&2 -e "\r\033[K"
    # the different pages frequently come back with different
    # column widths.
    # If we insert a tab before the notification type
    # and recolumnize on that everything works out.
    echo "$all_notifs" |
        sed -e "s/ Issue / \tIssue /" \
            -e "s/ PullRequest / \tPullRequest /" \
            -e "s/ Commit / \tCommit /" \
            -e "s/ Release / \tRelease /" |
        column -t -s $'\t'
}

filtered_notifs() {
    print_notifs | grep -v "$exclusion_string" | grep "$filter_string"
}

fzf_help() {
    cat <<EOF
Hotkey Map

ENTER     -  Print Notification and Exit
TAB       -  Preview Notification
CTRL+B    -  Open in Browser
CTRL+M    -  Mark all Notifications as read
CTRL+U/D  -  Preview Up/Down
CTRL+W/S  -  Preview Up/Down (half a page steps)
CTRL+X    -  Write a Comment using the Editor
ESC       -  Exit

Set your Editor
e.g. Visual Studio Code or Vim
gh config set editor \"code --wait\"
gh config set editor vim
EOF
}

Open_notification_browser='if grep -qE "Issue|PullRequest" <<<{4}; then gh issue view {5} -wR {3}; elif grep -q Release <<<{4}; then gh release view -wR {3}; else gh repo view -w {3}; fi'
Preview_notification='echo \[{1} {2} - {4}\] ;if grep -q Issue <<<{4}; then gh issue view {5} -R {3} --comments; elif grep -q PullRequest <<<\"{4}\"; then gh pr view {5} -R {3} --comments; elif grep -q Release <<<{4}; then gh release view -R {3}; else echo {} | sed "s/[ ]\\{3,\\}/  /g"; fi'

select_notif() {
    local notifs selection key repo type num
    notifs="$(filtered_notifs)"
    [ -n "$notifs" ] || exit 0
    # Enable terminal-style output even when the output is redirected.
    export GH_FORCE_TTY=100%
    # See the man page (man fzf) for an explanation of the arguments.
    # TODO: Release types without a tag name show only the information about the latest release.
    selection=$(fzf <<<"$notifs" --ansi --no-multi --reverse --info=inline \
        --margin 2%,1%,2%,1% --pointer='▶' \
        --border top --color "border:#778899" \
        --header $'? - Toggle Help\n\n' --color 'header:italic:dim' \
        --header-first --bind "change:first" \
        --bind "?:toggle-preview+change-preview:printf \"%s\n\n\n%s\" \"$(fzf_help)\" \"$(help)\"" \
        --bind "ctrl-u:preview-up,ctrl-d:preview-down" \
        --bind "ctrl-w:preview-half-page-up,ctrl-s:preview-half-page-down" \
        --bind "ctrl-b:execute-silent:$Open_notification_browser" \
        --bind "tab:toggle-preview+change-preview:$Preview_notification" \
        --preview-window wrap:"$preview_window_visibility":50%:right:border-left \
        --preview "$Preview_notification" \
        --expect "enter,ctrl-m,ctrl-x" | tr '\n' ' ')

    # Hotkey actions that close fzf are defined below
    read -r key _ _ repo type num _ <<<"$selection"
    [[ -n "$key" ]] && case "$key" in
    enter)
        # Disable the gh pager
        export GH_PAGER="cat"
        if grep -q "Issue" <<<"$type"; then
            gh issue view "$num" -R "$repo" --comments
        elif grep -q "PullRequest" <<<"$type"; then
            gh pr view "$num" -R "$repo" --comments
        elif grep -q "Release" <<<"$type"; then
            gh release view -R "$repo"
        else
            echo "Notification preview for $type is not supported."
        fi
        ;;
    ctrl-m)
        gh api -X PUT notifications -F read=true --silent
        gh notify "$Args"
        ;;
    ctrl-x)
        if grep -qE "Issue|PullRequest" <<<"$type"; then
            gh issue comment "${num}" -R "$repo"
        else
            echo "Writing comments for $type is not supported."
        fi
        ;;
    esac
}

if [[ $mark_read_flag == "true" ]]; then
    gh api -X PUT notifications -F read=true --silent
    exit 0
fi

if [[ $print_static_flag == "false" ]]; then
    if ! type -p fzf >/dev/null; then
        echo "error: install \`fzf\` or use the -s flag" >&2
        exit 1
    fi
    select_notif
else
    filtered_notifs
fi
